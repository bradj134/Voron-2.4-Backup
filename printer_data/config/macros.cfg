#####################################################################
#   Macros
#####################################################################

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28 X
    G28 Y
    G28 Z
   # QUAD_GANTRY_LEVEL
   # G28
    ##  Uncomment for for your size printer:
    #--------------------------------------------------------------------
    ##  Uncomment for 250mm build
    #G0 X125 Y125 Z30 F3600
    
    ##  Uncomment for 300 build
    #G0 X150 Y150 Z30 F3600
    
    ##  Uncomment for 350mm build
    G0 X175 Y175 Z30 F3600
    #--------------------------------------------------------------------
    RESTORE_GCODE_STATE NAME=STATE_G32



   
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
#[gcode_macro PRINT_START]
#gcode:
#    G32                            ; home all axes
#    G90                            ; absolute positioning
#    G1 Z20 F3000                   ; move nozzle away from bed
#    Quad_Gantry_Level
#    Calibrate_Z
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice




#####################################################################
#   print_start macro
#####################################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Z_TILT_ADJUST if your printer is a Trident
## Quad gantry level if your printer is a V2
## Nevermore - if you have one

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  SET_PIN PIN=caselight VALUE=0.52        # Turn on Casellight

  ##  Uncomment for bed mesh (1 of 2)
  BED_MESH_CLEAR       # Clears old saved bed mesh (if any)


  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  STATUS_HOMING         # Sets SB-leds to homing-mode
  G32                   # Full home (XYZ)
  G90                   # Absolut position

  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    M106 S255                                           # Turns on the PT-fan

    ##  Uncomment if you have a Nevermore.
    #SET_PIN PIN=nevermore VALUE=1                      # Turns on the nevermore

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Displays info
   # TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5min"                # Displays info
    # G4 P300000                                          # Waits 5 min for the bedtemp to stabilize
  {% endif %}


  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Hotend: 150c"          # Displays info
  M109 S150                                    # Heats the nozzle to 150c

  ##  Uncomment for Trident (Z_TILT_ADJUST)
  #SET_DISPLAY_TEXT MSG="Z-tilt adjust"     # Displays info
  #STATUS_LEVELING                          # Sets SB-leds to leveling-mode
  #Z_TILT_ADJUST                            # Levels the buildplate via z_tilt_adjust
  #G28 Z                                    # Homes Z again after z_tilt_adjust

  ##  Uncomment for V2 (Quad gantry level AKA QGL)
  SET_DISPLAY_TEXT MSG="QGL"      # Displays info
  STATUS_LEVELING                 # Sets SB-leds to leveling-mode
  Quad_Gantry_Level               # Levels the buildplate via QGL
  G28 Z                           # Homes Z again after QGL

  ##  Uncomment for Klicky auto-z
   # CALIBRATE_Z                                 # Calibrates Z-offset with klicky
   # SET_DISPLAY_TEXT MSG="Z-offset"             # Displays info

  ##  Uncomment for bed mesh (2 of 2)
  SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
  STATUS_MESHING                     # Sets SB-leds to bed mesh-mode
  Bed_Mesh_Calibrate                 # Starts bed mesh

  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
  STATUS_HEATING                                                # Sets SB-leds to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed
  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp

  # Gets ready to print by doing a purge line and updating the SB-leds
  SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
  #STATUS_PRINTING                                  # Sets SB-leds to printing-mode
  G0 X{x_wait - 50} Y4 F10000                      # Moves to starting point
  G0 Z0.4                                          # Raises Z to 0.4
  G91                                              # Incremental positioning 
  G1 X100 E20 F1000                                # Purge line
  G90                                              # Absolut position
  SET_LED LED="headlight" RED=0 GREEN=0 BLUE=0 WHITE=1 SYNC=0 TRANSMIT=1    #   Turn on SB light

[gcode_macro PRINT_END]
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro CHANGE_FILAMENT]
gcode:
    {% set x_park = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 10 %}
    {% set z_park = [printer.toolhead.position.z + 2, printer.toolhead.axis_maximum.z]|min %}
    {% set print_temp = printer.extruder.target|float %}
    {% set bed_temp = printer.heater_bed.target|float %}

    # Pause the print
    PAUSE
    SET_DISPLAY_TEXT MSG="Filufreq runout detected"
    
    # Park the print head
    G90
    G0 X{x_park} Y{y_park} Z{z_park} F9000
    
    # Ensure nozzle and bed are at print temperatures
    SET_DISPLAY_TEXT MSG="Maintaining nozzle at {print_temp}C, bed at {bed_temp}C"
    M109 S{print_temp} ; Wait for extruder to maintain print temperature
    M190 S{bed_temp}   ; Wait for bed to maintain print temperature
    
    # Unload filament
    SET_DISPLAY_TEXT MSG="Unloading filament"
    UNLOAD_FILAMENT
    
    # Keep nozzle and bed at print temperatures while waiting
    SET_DISPLAY_TEXT MSG="Insert new filament and press RESUME"
    M109 S{print_temp} ; Ensure extruder temperature is maintained during pause
    M190 S{bed_temp}   ; Ensure bed temperature is maintained during pause
    M0 ; Pause and wait for user interaction (RESUME button in UI)
    
    # Load new filament
    SET_DISPLAY_TEXT MSG="Loading filament"
    M109 S{print_temp} ; Ensure extruder temperature before loading
    M190 S{bed_temp}   ; Ensure bed temperature before loading
    LOAD_FILAMENT
    
    # Clear display
    SET_DISPLAY_TEXT MSG="Resuming print"

[gcode_macro LOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E100 F300                    ; load
   G1 E15 F150                    ; prime nozzle with filament
   M82                            ; set extruder to absolute
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E10 F300                    ; extrude a little to soften tip
   G1 E-120 F1800                  ; retract some, but not too much or it will jam
   M82                            ; set extruder to absolute

[gcode_macro NOZZLE_CHANGE]
description: Heat & wait -> unload -> nozzle off -> part fan for 2 min
# Defaults (can be overridden when calling, e.g., NOZZLE_CHANGE TEMP=210 FAN_TIME=180)
variable_temp: 200        # target nozzle temp (Â°C)
variable_fan_time: 120    # fan runtime (seconds)

gcode:
  G32
  G90
  G0 X175 Y175 Z220 F12000

  # Read params or fall back to defaults
  {% set t = params.TEMP|default(printer["gcode_macro NOZZLE_CHANGE"].temp)|int %}
  {% set cool = params.FAN_TIME|default(printer["gcode_macro NOZZLE_CHANGE"].fan_time)|int %}

  # Heat and WAIT until at temp
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={t}
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={t}

  # Your existing unload macro
  UNLOAD_FILAMENT

  # Turn off ONLY the nozzle heater
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0

  # Run part-cooling fan (assumes default [fan]; add FAN=fan if you named it)
  SET_FAN_SPEED SPEED=1.0
  G4 S{cool}
  SET_FAN_SPEED SPEED=0

[gcode_macro update_git]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh -c \"$0\""
timeout: 90.0
verbose: True
